diff --git a/bindings/java/lang.py b/bindings/java/lang.py
index b4ad48ec..f7c44ad6 100644
--- a/bindings/java/lang.py
+++ b/bindings/java/lang.py
@@ -69,7 +69,7 @@ def mangle_name(name):
 def jni_glist_elem_type(type):
     if is_cstring(type):
         return 'jstring'
-    elif is_xml_node(type):
+    elif is_xml_node(type) or is_xml_doc(type):
         return 'jstring'
     elif is_object(type):
         return 'jobject'
@@ -85,7 +85,7 @@ def jni_hashtable_elem_type(type):
 def JNI_elem_type(type):
     if is_cstring(type):
         return 'String'
-    elif is_xml_node(type):
+    elif is_xml_node(type) or is_xml_doc(type):
         return 'String'
     elif is_object(type):
         return convert_class_name(type)
@@ -231,7 +231,7 @@ protected static native void destroy(long cptr);
             return 'String'
         elif is_collection(vtype):
             return 'Object[]'
-        elif is_xml_node(vtype):
+        elif is_xml_node(vtype) or is_xml_doc(vtype):
             return 'String'
         elif is_object(vtype):
             return convert_class_name(unpointerize(unconstify(vtype)))
@@ -252,6 +252,8 @@ protected static native void destroy(long cptr);
             return 'Object[]'
         elif vtype == 'xmlNode*':
             return 'String'
+        elif vtype == 'xmlDoc*':
+            return 'String'
         elif isinstance(vtype,string_types) and vtype.startswith('Lasso'):
             if vtype.endswith('*'):
                 vtype = vtype[:-1]
@@ -300,7 +302,7 @@ protected static native void destroy(long cptr);
                 print_('   public static native void %s(GObject obj, %s[] value);' % (name,jtype), file=fd)
                 name = '%s_add' % prefix
                 print_('   public static native void %s(GObject obj, %s value);' % (name,jtype), file=fd)
-                if not m[2].get('element-type') in ('xmlNode*',):
+                if not m[2].get('element-type') in ('xmlNode*', 'xmlDoc*'):
                     name = '%s_remove' % prefix
                     print_('   public static native void %s(GObject obj, %s value);' % (name,jtype), file=fd)
             elif mtype == 'GHashTable*':
@@ -388,7 +390,7 @@ protected static native void destroy(long cptr);
             return 'jstring'
         elif is_glist(type) or is_hashtable(type):
             return 'jobjectArray'
-        elif is_xml_node(type):
+        elif is_xml_node(type) or is_xml_doc(type):
             return 'jstring'
         elif is_object(type):
             return 'jobject'
@@ -408,6 +410,8 @@ protected static native void destroy(long cptr);
                 return 'get_list_of_strings(env, %s, &%s)' % (right, left)
             elif is_xml_node(el_type):
                 return 'get_list_of_xml_nodes(env, %s, &%s)' % (right, left)
+            elif is_xml_doc(el_type):
+                return 'get_list_of_xml_docs(env, %s, &%s)' % (right, left)
             elif is_object(el_type):
                 return 'get_list_of_objects(env, %s, &%s)' % (right, left)
             else:
@@ -420,6 +424,8 @@ protected static native void destroy(long cptr);
                 return 'get_hash_of_strings(env, %s, &%s)' % (right, left)
         elif is_xml_node(type):
                 return 'xml_node_to_jstring(env, %s, &%s)' % (right, left)
+        elif is_xml_doc(type):
+                return 'xml_doc_to_jstring(env, %s, &%s)' % (right, left)
         elif is_object(type):
             if is_transfer_full(type):
                 return 'gobject_to_jobject(env, (GObject*)%s, &%s);' % (right, left)
@@ -439,6 +445,8 @@ protected static native void destroy(long cptr);
                 return 'set_list_of_strings(env, &%s,%s);' % (left,right)
             elif is_xml_node(el_type):
                 return 'set_list_of_xml_nodes(env, &%s, %s);' % (left, right)
+            elif is_xml_doc(el_type):
+                return 'set_list_of_xml_docs(env, &%s, %s);' % (left, right)
             elif is_object(el_type):
                 return 'set_list_of_objects(env, &%s, %s);' % (left, right)
             else:
@@ -451,6 +459,8 @@ protected static native void destroy(long cptr);
                 return 'set_hash_of_strings(env, %s, %s);' % (left,right)
         elif is_xml_node(type):
             return 'jstring_to_xml_node(env, %s, &%s);' % (right, left)
+        elif is_xml_doc(type):
+            return 'jstring_to_xml_doc(env, %s, &%s);' % (right, left)
         elif is_object(type):
             if is_transfer_full(type) or full:
                 return 'jobject_to_gobject(env, %s, (GObject**)&%s);' % (right, left)
@@ -640,6 +650,8 @@ protected static native void destroy(long cptr);
             print_('    add_to_list_of_strings(env, &%(field)s, value);' % d, file=fd)
         elif is_xml_node(el_type):
             print_('    add_to_list_of_xml_nodes(env, &%(field)s, value);' % d, file=fd)
+        elif is_xml_doc(el_type):
+            print_('    add_to_list_of_xml_docs(env, &%(field)s, value);' % d, file=fd)
         elif is_object(el_type):
             print_('    add_to_list_of_objects(env, &%(field)s, value);' % d, file=fd)
         else:
@@ -661,6 +673,9 @@ protected static native void destroy(long cptr);
         if is_xml_node(el_type):
             print_('W: remove for list of xml node not supported: %s' % (m,), file=sys.stderr)
             return
+        if is_xml_doc(el_type):
+            print_('W: remove for list of xml doc not supported: %s' % (m,), file=sys.stderr)
+            return
         print_('/* Remover for %(type)s<%(el_type)s> %(klass)s.%(name)s */' % d, file=fd)
         print_('%(signature)s, jobject jobj, %(jni_el_type)s value)\n  {' % d, file=fd)
         print_('    %(klass)s *gobj = NULL;' % d, file=fd)
@@ -824,7 +839,7 @@ protected static native void destroy(long cptr);
                     print_('    public void addTo%s(%s value) {' % (jname,jtype), file=fd)
                     print_('        LassoJNI.%s_add(this, value);' % prefix, file=fd)
                     print_('    }', file=fd)
-                    if m[2].get('element-type') not in ('xmlNode*',):
+                    if m[2].get('element-type') not in ('xmlNode*', 'xmlDoc*'):
                         print_('    public void removeFrom%s(%s value) {' % (jname,jtype), file=fd)
                         print_('        LassoJNI.%s_remove(this, value);' % prefix, file=fd)
                         print_('    }', file=fd)
@@ -838,7 +853,7 @@ protected static native void destroy(long cptr);
                         print_('    public void addTo%s(%s value) {' % (old_jname,jtype), file=fd)
                         print_('        this.addTo%s(value);' % jname, file=fd)
                         print_('    }', file=fd)
-                        if m[2].get('element-type') not in ('xmlNode*',):
+                        if m[2].get('element-type') not in ('xmlNode*', 'xmlDoc*'):
                             print_('    public void removeFrom%s(%s value) {' % (old_jname,jtype), file=fd)
                             print_('        this.removeFrom%s(value);' % jname, file=fd)
                             print_('    }', file=fd)
diff --git a/bindings/perl/glist_handling.c b/bindings/perl/glist_handling.c
index 01deb274..85a40aa6 100644
--- a/bindings/perl/glist_handling.c
+++ b/bindings/perl/glist_handling.c
@@ -91,6 +91,48 @@ pv_to_xmlnode(SV *value) {
 	return lasso_string_fragment_to_xmlnode(string, size);
 }
 
+/**
+ * xmldoc_to_pv:
+ * @doc: an xmlDoc* object
+ * @do_free: do we need to free the doc after the conversion
+ *
+ * Return value: a newly allocated SV/PV or under.
+ */
+static SV*
+xmldoc_to_pv(xmlDoc *doc, gboolean do_free)
+{
+        xmlChar *xmlString;
+        int size;
+	SV *pestring = NULL;
+
+	if (doc == NULL) {
+		return &PL_sv_undef;
+	}
+
+        xmlDocDumpMemory(doc, &xmlString, &size);
+        pestring = newSVpv((char*)xmlString, size);
+	if (do_free) {
+		lasso_release_xml_doc(doc);
+	}
+        xmlFree(xmlString);
+
+	return pestring;
+}
+
+static xmlDoc *
+pv_to_xmldoc(SV *value) {
+	unsigned int size;
+	char *string;
+
+	if (! SvPOK(value))
+		return NULL;
+	string = SvPV(value, size);
+	if (! string)
+		return NULL;
+
+	return lasso_string_fragment_to_xmldoc(string, size);
+}
+
 /**
  * array_to_glist_string:
  * @array: a Perl array
diff --git a/bindings/perl/lang.py b/bindings/perl/lang.py
index f412ff95..ef985fda 100644
--- a/bindings/perl/lang.py
+++ b/bindings/perl/lang.py
@@ -101,6 +101,8 @@ gboolean\tT_IV
 const LassoProvider *\tT_GOBJECT_WRAPPER
 xmlNode*\tT_XMLNODE
 const xmlNode*\tT_XMLNODE
+xmlDoc*\tT_XMLDOC
+const xmlDoc*\tT_XMLDOC
 GList_string\tT_GLIST_STRING
 GList_xmlnode\tT_GLIST_XMLNODE
 GList_gobject\tT_GLIST_GOBJECT
@@ -310,7 +312,7 @@ INCLUDE: LassoNode.xs
                     if arg_default(arg):
                         arg_names.append(aname + ' = ' + self.default_value(arg))
                     else:
-                        if is_cstring(arg) or is_glist(arg) or is_xml_node(arg) or is_object(arg):
+                        if is_cstring(arg) or is_glist(arg) or is_xml_node(arg) or is_xml_doc(arg) or is_object(arg):
                             arg_names.append(aname + ' = NULL')
                         else:
                             raise Exception('Do not know what to do for optional: %s' % arg)
@@ -321,7 +323,9 @@ INCLUDE: LassoNode.xs
             if is_glist(arg) and not is_transfer_full(arg):
                     cleanup.append(self.release_list(arg_name(arg), arg))
             if is_xml_node(arg) and not is_transfer_full(arg):
-                    cleanup.append('lasso_release_xml_node(%s)' % arg_name(arg))
+                    cleanup.append('lasso_release_xml_node(%s);' % arg_name(arg))
+            if is_xml_doc(arg) and not is_transfer_full(arg):
+                    cleanup.append('lasso_release_xml_doc(%s);' % arg_name(arg))
             if is_hashtable(arg):
                 raise Exception("No cleanup code generation for GHashTable")
         self.xs.p(','.join(arg_names))
@@ -478,7 +482,7 @@ HV*
             return str + '*'
 
     def glist_type(self, member):
-        x = self.element_type_lookup(member, { 'string': 'GList_string', 'xml_node': 'GList_xmlnode', 'gobject': 'GList_gobject'})
+        x = self.element_type_lookup(member, { 'string': 'GList_string', 'xml_node': 'GList_xmlnode', 'xml_doc': 'GList_xmldoc', 'gobject': 'GList_gobject'})
         if is_const(member):
             return x + '_const'
         return x
@@ -491,6 +495,8 @@ HV*
             return lookup_table['string']
         elif is_xml_node(type):
             return lookup_table['xml_node']
+        elif is_xml_doc(type):
+            return lookup_table['xml_doc']
         elif is_object(type):
             return lookup_table['gobject']
         else:
@@ -506,6 +512,8 @@ HV*
             macro = 'lasso_release_list_of_strings'
         elif is_xml_node(type):
             macro = 'lasso_release_list_of_xml_node'
+        elif is_xml_doc(type):
+            macro = 'lasso_release_list_of_xml_doc'
         elif is_object(type):
             macro = 'lasso_release_list_of_gobjects'
         else:
@@ -520,6 +528,8 @@ HV*
             macro = 'SvPV_nolen'
         elif is_xml_node(type):
             macro = 'pv_to_xmlnode'
+        elif is_xml_doc(type):
+            macro = 'pv_to_xmldoc'
         elif is_object(type):
             macro = 'gperl_get_object'
         else:
@@ -534,6 +544,8 @@ HV*
             macro = 'lasso_list_add_string'
         elif is_xml_node(type):
             macro = 'lasso_list_add_new_xml_node'
+        elif is_xml_doc(type):
+            macro = 'lasso_list_add_new_xml_doc'
         elif is_object(type):
             macro = 'lasso_list_add_gobject'
         else:
@@ -550,12 +562,14 @@ HV*
             macro = 'lasso_assign_string'
         elif is_xml_node(arg):
             macro = 'lasso_assign_xml_node'
+        elif is_xml_doc(arg):
+            macro = 'lasso_assign_xml_doc'
         elif is_glist(arg):
             if not el_type:
                 raise Exception('%s has no element type %s' % (arg, struct))
             if is_cstring(el_type):
                 macro = 'lasso_assign_list_of_strings'
-            elif is_xml_node(el_type):
+            elif is_xml_node(el_type) or is_xml_doc(el_type):
                 macro = 'lasso_assign_simple' # FIXME
             elif is_object(el_type):
                 macro = 'lasso_assign_list_of_gobjects'
diff --git a/bindings/perl/typemap-in b/bindings/perl/typemap-in
index b6eede9c..50920231 100644
--- a/bindings/perl/typemap-in
+++ b/bindings/perl/typemap-in
@@ -11,6 +11,9 @@ T_GOBJECT_WRAPPER
 T_XMLNODE
     $var = pv_to_xmlnode($arg);
 
+T_XMLDOC
+    $var = pv_to_xmldoc($arg);
+
 T_GLIST_STRING
     $var = array_to_glist_string((AV*)SvRV($arg));
 
diff --git a/bindings/perl/typemap-out b/bindings/perl/typemap-out
index 6ed7022e..191bc7ae 100644
--- a/bindings/perl/typemap-out
+++ b/bindings/perl/typemap-out
@@ -9,6 +9,9 @@ T_XMLNODE_OWN
 T_XMLNODE
     $arg = xmlnode_to_pv($var, FALSE);
 
+T_XMLDOC
+    $arg = xmldoc_to_pv($var, FALSE);
+
 T_GLIST_STRING
     {
       I32 ix, length;
diff --git a/bindings/php5/wrapper_source.py b/bindings/php5/wrapper_source.py
index d84b6fdb..9b0d5a85 100644
--- a/bindings/php5/wrapper_source.py
+++ b/bindings/php5/wrapper_source.py
@@ -33,7 +33,7 @@ class WrapperSource:
 
     def is_object(self, t):
         return t not in ['char*', 'const char*', 'gchar*', 'const gchar*', 'GList*', 'GHashTable*', 'GType',
-                'xmlNode*', 'int', 'gint', 'gboolean', 'const gboolean'] + self.binding_data.enums
+                'xmlNode*', 'xmlDoc*', 'int', 'gint', 'gboolean', 'const gboolean'] + self.binding_data.enums
 
     def generate(self):
         self.generate_header()
@@ -130,6 +130,17 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
             ZVAL_NULL(%(zval_name)s);
         }
     }
+''' % q, file=self.fd)
+        elif arg_type(type) == 'xmlDoc*':
+            six.print_('''\
+    {
+        char* xmlString = get_string_from_xml_doc(%(c_variable)s);
+        if (xmlString) {
+            ZVAL_STRING(%(zval_name)s, xmlString, 0);
+        } else {
+            ZVAL_NULL(%(zval_name)s);
+        }
+    }
 ''' % q, file=self.fd)
         elif is_glist(type):
             elem_type = make_arg(element_type(type))
@@ -141,6 +152,9 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
             elif arg_type(elem_type).startswith('xmlNode'):
                 function = 'set_array_from_list_of_xmlnodes'
                 free_function = 'free_glist(&%(c_variable)s, (GFunc)xmlFree);'
+            elif arg_type(elem_type).startswith('xmlDoc'):
+                function = 'set_array_from_list_of_xmldocs'
+                free_function = 'free_glist(&%(c_variable)s, (GFunc)xmlFree);'
             elif is_object(elem_type):
                 function = 'set_array_from_list_of_objects'
                 free_function = 'g_list_free(%(c_variable)s);'
@@ -200,6 +214,19 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
 ''', file=self.fd)
             if free:
                 six.print_('    lasso_release_xml_node(return_c_value);', file=self.fd)
+        elif is_xml_doc(arg):
+            six.print_('''\
+    {
+        char* xmlString = get_string_from_xml_doc(return_c_value);
+        if (xmlString) {
+            RETVAL_STRING(xmlString, 0);
+        } else {
+            RETVAL_NULL();
+        }
+    }
+''', file=self.fd)
+            if free:
+                six.print_('    lasso_release_xml_doc(return_c_value);', file=self.fd)
         elif is_glist(arg):
             el_type = element_type(arg)
             if is_cstring(el_type):
@@ -214,6 +241,12 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
 ''', file=self.fd)
                 if free or is_transfer_full(arg):
                     six.print_('    lasso_release_list_of_xml_node(return_c_value);', file=self.fd)
+            elif is_xml_doc(el_type):
+                six.print_('''\
+    set_array_from_list_of_xmldocs((GList*)return_c_value, &return_value);
+''', file=self.fd)
+                if free or is_transfer_full(arg):
+                    six.print_('    lasso_release_list_of_xml_doc(return_c_value);', file=self.fd)
             elif is_object(el_type):
                 six.print_('''\
     set_array_from_list_of_objects((GList*)return_c_value, &return_value);
@@ -287,6 +320,12 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
                 six.print_('    %s %s = NULL;' % ('xmlNode*', arg_name(arg)), file=self.fd)
                 six.print_('    %s %s_str = NULL;'  % ('char*', arg_name(arg)), file=self.fd)
                 six.print_('    %s %s_len = 0;' % ('int', arg_name(arg)), file=self.fd)
+            elif is_xml_doc(arg):
+                parse_tuple_format.append('s!')
+                parse_tuple_args.append('&%s_str, &%s_len' % (arg_name(arg), arg_name(arg)))
+                six.print_('    %s %s = NULL;' % ('xmlDoc*', arg_name(arg)), file=self.fd)
+                six.print_('    %s %s_str = NULL;'  % ('char*', arg_name(arg)), file=self.fd)
+                six.print_('    %s %s_len = 0;' % ('int', arg_name(arg)), file=self.fd)
             elif is_glist(arg):
                 parse_tuple_format.append('a!')
                 parse_tuple_args.append('&zval_%s' % arg_name(arg))
@@ -323,6 +362,9 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
             elif is_xml_node(arg):
                 six.print_('''\
         %(name)s = get_xml_node_from_string(%(name)s_str);''' % {'name': arg[1]}, file=self.fd)
+            elif is_xml_doc(arg):
+                six.print_('''\
+        %(name)s = get_xml_doc_from_string(%(name)s_str);''' % {'name': arg[1]}, file=self.fd)
             elif f.startswith('s'):
                 six.print_('''\
         %(name)s = %(name)s_str;''' % {'name': arg[1]}, file=self.fd)
@@ -366,6 +408,8 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
                 pass
             elif argtype == 'xmlNode*':
                 six.print_('    xmlFree(%s);' % argname, file=self.fd)
+            elif argtype == 'xmlDoc*':
+                six.print_('    xmlFree(%s);' % argname, file=self.fd)
             elif f.startswith('a'):
                 el_type = element_type(arg)
                 if is_cstring(el_type):
@@ -430,7 +474,7 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
         # FIXME: This bloc should be factorised
         parse_tuple_format = ''
         parse_tuple_args = []
-        if is_cstring(m) or is_xml_node(m):
+        if is_cstring(m) or is_xml_node(m): or is_xml_doc(m)
             # arg_type = arg_type.replace('const ', '')
             parse_tuple_format += 's'
             parse_tuple_args.append('&%s_str, &%s_len' % (name, name))
@@ -481,12 +525,16 @@ PHP_MSHUTDOWN_FUNCTION(lasso)
             six.print_('    lasso_assign_string(this->%(name)s, %(name)s_str);' % d, file=self.fd)
         elif is_xml_node(m):
             six.print_('    lasso_assign_new_xml_node(this->%(name)s, get_xml_node_from_string(%(name)s_str));' % d, file=self.fd)
+        elif is_xml_doc(m):
+            six.print_('    lasso_assign_new_xml_doc(this->%(name)s, get_xml_doc_from_string(%(name)s_str));' % d, file=self.fd)
         elif is_glist(m):
             el_type = element_type(m)
             if is_cstring(el_type):
                 six.print_('    lasso_assign_new_list_of_strings(this->%(name)s, get_list_from_array_of_strings(zval_%(name)s));' % d, file=self.fd)
             elif is_xml_node(el_type):
                 six.print_('    lasso_assign_new_list_of_xml_node(this->%(name)s, get_list_from_array_of_xmlnodes(zval_%(name)s))' % d, file=self.fd)
+            elif is_xml_doc(el_type):
+                six.print_('    lasso_assign_new_list_of_xml_doc(this->%(name)s, get_list_from_array_of_xmldocs(zval_%(name)s))' % d, file=self.fd)
             elif is_object(el_type):
                 six.print_('    lasso_assign_new_list_of_gobjects(this->%(name)s, get_list_from_array_of_objects(zval_%(name)s));' % d, file=self.fd)
             else:
diff --git a/bindings/php5/wrapper_source_top.c b/bindings/php5/wrapper_source_top.c
index 3ff4fe27..5cae0193 100644
--- a/bindings/php5/wrapper_source_top.c
+++ b/bindings/php5/wrapper_source_top.c
@@ -156,10 +156,35 @@ get_string_from_xml_node(xmlNode *xmlnode)
 	return result;
 }
 
+static char*
+get_string_from_xml_doc(xmlDoc *xmldoc)
+{
+        xmlBuffer *buffer;
+        char *result;
+
+        if (xmldoc == NULL) {
+                return NULL;
+        }
+        buffer = xmldoc_to_xmlbuffer(xmldoc);
+        if (buffer == NULL) {
+                result = NULL;
+        } else {
+                result = estrdup((char*)xmlBufferContent(buffer));
+                xmlBufferFree(buffer);
+        }
+	return result;
+}
+
 static xmlNode*
 get_xml_node_from_string(char *string)
 {
-	return lasso_string_fragment_to_xmlnode(string, 0);
+        return lasso_string_fragment_to_xmlnode(string, 0);
+}
+
+static xmlDoc*
+get_xml_doc_from_string(char *string)
+{
+        return lasso_string_fragment_to_xmldoc(string, 0);
 }
 
 static GList*
diff --git a/bindings/python/lang.py b/bindings/python/lang.py
index 5ba4265c..fd9d72e3 100644
--- a/bindings/python/lang.py
+++ b/bindings/python/lang.py
@@ -78,6 +78,8 @@ class Binding:
             pass
         elif is_xml_node(type):
             print_('    lasso_release_xml_node(%s);' % name, file=fd)
+        elif is_xml_doc(type):
+            print >>fd, '   lasso_release_xml_doc(%s);' % name
         elif is_glist(type):
             etype = element_type(type)
             if is_cstring(etype):
@@ -396,7 +398,7 @@ StringDict = dict
             print_('    def get_%s(self):' % mname, file=fd)
             print_('        t = _lasso.%s_%s_get(self._cptr)' % (
                     klassname, mname), file=fd)
-            if is_int(m, self.binding_data) or is_xml_node(m) or is_cstring(m) or is_boolean(m):
+            if is_int(m, self.binding_data) or is_xml_node(m) or is_xml_doc(m) or is_cstring(m) or is_boolean(m):
                 pass
             elif is_object(m):
                 print_('        t = cptrToPy(t)', file=fd)
@@ -404,7 +406,7 @@ StringDict = dict
                 el_type = element_type(m)
                 if is_cstring(el_type):
                     pass
-                elif is_xml_node(el_type):
+                elif is_xml_node(el_type) or is_xml_doc(el_type):
                     pass
                 elif is_object(el_type):
                     print_('        if not t: return t', file=fd)
@@ -421,14 +423,14 @@ StringDict = dict
                     print_('        t = frozendict(d2)', file=fd)
                 else:
                     print_('        t = frozendict(t)', file=fd)
-            elif is_boolean(m) or is_int(m, self.binding_data) or is_xml_node(m) or is_cstring(m):
+            elif is_boolean(m) or is_int(m, self.binding_data) or is_xml_node(m) or is_xml_doc(m) or is_cstring(m):
                 pass
             else:
                 raise Exception('Unsupported python getter %s.%s' % (clss, m))
             print_('        return t;', file=fd)
             # setter
             print_('    def set_%s(self, value):' % mname, file=fd)
-            if is_int(m, self.binding_data) or is_xml_node(m) or is_boolean(m):
+            if is_int(m, self.binding_data) or is_xml_node(m) or is_xml_doc(m) or is_cstring(m) or is_boolean(m):
                 pass
             elif is_cstring(m):
                 print_('        value = str2lasso(value)', file=fd)
@@ -437,7 +439,7 @@ StringDict = dict
                 print_('            value = value and value._cptr', file=fd)
             elif is_glist(m):
                 el_type = element_type(m)
-                if is_cstring(el_type) or is_xml_node(el_type):
+                if is_cstring(el_type) or is_xml_node(el_type) or is_xml_doc(el_type):
                     pass
                 elif is_object(el_type):
                     print_('        if value is not None:', file=fd)
@@ -488,7 +490,7 @@ StringDict = dict
                     c_args.append(outvar)
                 elif is_cstring(arg):
                     c_args.append('str2lasso(%s)' % arg_name(arg))
-                elif is_xml_node(arg) or is_boolean(arg) or is_cstring(arg) or is_int(arg, self.binding_data) or is_glist(arg) or is_hashtable(arg) or is_time_t_pointer(arg):
+                elif is_xml_node(arg) or is_xml_doc(arg) or is_boolean(arg) or is_cstring(arg) or is_int(arg, self.binding_data) or is_glist(arg) or is_hashtable(arg) or is_time_t_pointer(arg):
                     c_args.append(arg_name(arg))
                 elif is_object(arg):
                     c_args.append('%(name)s and %(name)s._cptr' % { 'name': arg_name(arg) })
@@ -531,7 +533,7 @@ StringDict = dict
                 print_('        rc = _lasso.%s(self._cptr%s)' % (
                         function_name, c_args), file=fd)
                 print_('        Error.raise_on_rc(rc)', file=fd)
-            elif (is_int(m.return_arg, self.binding_data) or is_xml_node(m.return_arg) or
+            elif (is_int(m.return_arg, self.binding_data) or is_xml_node(m.return_arg) or is_xml_doc(m.return_arg) or
                     is_cstring(m.return_arg) or is_boolean(m.return_arg) or
                     is_hashtable(m.return_arg)):
                 print_('        return _lasso.%s(self._cptr%s)' % (
@@ -784,7 +786,7 @@ register_constants(PyObject *d)
                 parse_format = 'l'
                 parse_arg = '&value'
                 print_('    long value;', file=fd)
-            elif is_glist(m) or is_hashtable(m) or is_xml_node(m) or is_boolean(m):
+            elif is_glist(m) or is_hashtable(m) or is_xml_node(m) or is_xml_doc(m) or is_boolean(m):
                 parse_format = 'O'
                 print_('    PyObject *cvt_value;', file=fd)
                 parse_arg = '&cvt_value'
@@ -808,12 +810,17 @@ register_constants(PyObject *d)
             elif is_xml_node(m):
                 print_('    if (this->%s) xmlFreeNode(this->%s);' % (name, name), file=fd)
                 print_('    this->%s = get_xml_node_from_pystring(cvt_value);' % name, file=fd)
+            elif is_xml_doc(m):
+                print >> fd, '    if (this->%s) xmlFreeDoc(this->%s);' % (name, name)
+                print >> fd, '    this->%s = get_xml_doc_from_pystring(cvt_value);' % name
             elif is_glist(m):
                 el_type = element_type(m)
                 if is_cstring(el_type):
                     print_('    RETURN_IF_FAIL(set_list_of_strings(&this->%s, cvt_value));' % name, file=fd)
                 elif is_xml_node(el_type):
                     print_('    RETURN_IF_FAIL(set_list_of_xml_nodes(&this->%s, cvt_value));' % name, file=fd)
+                elif is_xml_doc(el_type):
+                    print >> fd, '    set_list_of_xml_docs(&this->%s, cvt_value);' % name
                 elif is_object(el_type):
                     print_('    RETURN_IF_FAIL(set_list_of_pygobject(&this->%s, cvt_value));' % name, file=fd)
                 else:
@@ -864,6 +871,8 @@ register_constants(PyObject *d)
                 print_('    %s = get_list_of_strings(%s);' % (return_pyvar_name, return_var_name), file=fd)
             elif is_xml_node(el_type):
                 print_('    %s = get_list_of_xml_nodes(%s);' % (return_pyvar_name, return_var_name), file=fd)
+            elif is_xml_doc(el_type):
+                print >> fd, '    %s = get_list_of_xml_docs(%s);' % (return_pyvar_name, return_var_name)
             else:
                 raise Exception('failed to make an assignment for %s' % (arg,))
         elif is_hashtable(arg):
@@ -879,6 +888,13 @@ register_constants(PyObject *d)
             print_('    } else {', file=fd)
             print_('        %s = noneRef();' % return_pyvar_name, file=fd)
             print_('    }', file=fd)
+        elif is_xml_doc(arg):
+            # convert xmlDoc* to strings
+            print >> fd, '    if (%s) {' % return_var_name
+            print >> fd, '        %s = get_pystring_from_xml_doc(%s);' % (return_pyvar_name, return_var_name)
+            print >> fd, '    } else {'
+            print >> fd, '        %s = noneRef();' % return_pyvar_name
+            print >> fd, '    }'
         elif is_object(arg):
             # return a PyGObjectPtr (wrapper around GObject)
             print_('''\
@@ -934,7 +950,7 @@ register_constants(PyObject *d)
                     arg_def = '    %s %s = %s;' % (arg[0], arg[1], defval)
                 else:
                     arg_def = '    %s %s;' % (arg[0], arg[1])
-            elif is_hashtable(arg) or is_xml_node(arg) or is_list(arg) or is_time_t_pointer(arg):
+            elif is_hashtable(arg) or is_xml_node(arg) or is_xml_doc(arg) or is_list(arg) or is_time_t_pointer(arg):
                 parse_tuple_format.append('O')
                 parse_tuple_args.append('&cvt_%s' % aname)
                 arg_def = '    %s %s = NULL;' % (arg[0], arg[1])
@@ -977,12 +993,16 @@ register_constants(PyObject *d)
                     print_('    EXIT_IF_FAIL(set_list_of_strings(&%s, cvt_%s));' % (arg[1], arg[1]), file=fd)
                 elif is_xml_node(qualifier):
                     print_('    EXIT_IF_FAIL(set_list_of_xml_nodes(&%s, cvt_%s));' % (arg[1], arg[1]), file=fd)
+                elif is_xml_doc(qualifier):
+                    print_('    EXIT_IF_FAIL(set_list_of_xml_docs(&%s, cvt_%s));' % (arg[1], arg[1]), file=fd)
                 elif isinstance(qualifier, str) and qualifier.startswith('Lasso'):
                     print_('    EXIT_IF_FAIL(set_list_of_pygobject(&%s, cvt_%s));' % (arg[1], arg[1]), file=fd)
                 else:
                     print_('E: unqualified GList argument in', name, qualifier, arg, file=sys.stderr)
             elif is_xml_node(arg):
                 print_('    %s = get_xml_node_from_pystring(cvt_%s);' % (arg[1], arg[1]), file=fd)
+            elif is_xml_doc(arg):
+                print_('    %s = get_xml_doc_from_pystring(cvt_%s);' % (arg[1], arg[1]), file=fd)
             elif is_time_t_pointer(arg):
                 print_('    %s = get_time_t(cvt_%s);' % (arg[1], arg[1]), file=fd)
             elif is_hashtable(arg):
diff --git a/bindings/python/wrapper_top.c b/bindings/python/wrapper_top.c
index 1d160da4..c85862c0 100644
--- a/bindings/python/wrapper_top.c
+++ b/bindings/python/wrapper_top.c
@@ -88,6 +88,8 @@ PyMODINIT_FUNC init_lasso(void);
 #endif
 G_GNUC_UNUSED static PyObject* get_pystring_from_xml_node(xmlNode *xmlnode);
 G_GNUC_UNUSED static xmlNode*  get_xml_node_from_pystring(PyObject *string);
+G_GNUC_UNUSED static PyObject* get_pystring_from_xml_doc(xmlDoc *xmldoc);
+G_GNUC_UNUSED static xmlDoc*  get_xml_doc_from_pystring(PyObject *string);
 G_GNUC_UNUSED static PyObject* get_dict_from_hashtable_of_objects(GHashTable *value);
 G_GNUC_UNUSED static PyObject* get_dict_from_hashtable_of_strings(GHashTable *value);
 G_GNUC_UNUSED static PyObject* PyGObjectPtr_New(GObject *obj);
@@ -214,6 +216,24 @@ get_pystring_from_xml_node(xmlNode *xmlnode)
 	return pystring;
 }
 
+static PyObject*
+get_pystring_from_xml_doc(xmlDoc *xmldoc)
+{
+	PyObject *pystring = NULL;
+	xmlChar *xmlString;
+        int size;
+
+	if (xmldoc == NULL) {
+		return NULL;
+	}
+
+        xmlDocDumpMemory(xmldoc, &xmlString, &size);
+        pystring = PyString_FromStringAndSize((char*)xmlString, size);
+        xmlFree(xmlString);
+
+	return pystring;
+}
+
 static gboolean
 valid_seq(PyObject *seq) {
 	if (! seq || ( seq != Py_None && ! PyTuple_Check(seq))) {
@@ -445,6 +465,12 @@ get_xml_node_from_pystring(PyObject *string) {
 	return xml_node;
 }
 
+static xmlDoc*
+get_xml_doc_from_pystring(PyObject *string) {
+	return lasso_string_fragment_to_xmldoc(PyString_AsString(string),
+			PyString_Size(string));
+}
+
 /** Return a tuple containing the string contained in a_list */
 static PyObject *
 get_list_of_strings(const GList *a_list) {
diff --git a/bindings/utils.c b/bindings/utils.c
index d7dd4934..1d867aed 100644
--- a/bindings/utils.c
+++ b/bindings/utils.c
@@ -51,3 +51,26 @@ cleanup:
 	lasso_release_xml_node_list(list);
 	return node;
 }
+
+/**
+ * lasso_string_fragment_to_xmldoc:
+ * @fragment: a fragment of an XML document
+ * @size:
+ *
+ * Try to get one and only one node from a string, the node can be a simple string or a single node.
+ *
+ * Return value: a newly allocated xmlNode* or NULL if parsing fails.
+ */
+static xmlDoc*
+lasso_string_fragment_to_xmldoc(const char *fragment, int size) {
+	xmlDoc *doc = NULL;
+
+	if (size == 0) {
+		size = strlen(fragment);
+	}
+
+	/* single node case, with preceding or following spaces */
+	doc = xmlReadMemory(fragment, size, NULL, NULL, XML_PARSE_NONET);
+
+	return doc;
+}
diff --git a/bindings/utils.py b/bindings/utils.py
index 02432160..bc03847a 100644
--- a/bindings/utils.py
+++ b/bindings/utils.py
@@ -233,6 +233,10 @@ def is_xml_node(arg):
     arg = unconstify(arg_type(arg))
     return arg and arg.startswith('xmlNode')
 
+def is_xml_doc(arg):
+    arg = unconstify(arg_type(arg))
+    return arg and arg.startswith('xmlDoc')
+
 def is_boolean(arg):
     return arg_type(arg) in ('gboolean','bool')
 
diff --git a/lasso/id-ff/provider.h b/lasso/id-ff/provider.h
index f0be2272..65b6328f 100644
--- a/lasso/id-ff/provider.h
+++ b/lasso/id-ff/provider.h
@@ -216,6 +216,9 @@ LASSO_EXPORT gchar* lasso_provider_get_assertion_consumer_service_url(LassoProvi
 		const char *service_id);
 LASSO_EXPORT gchar* lasso_provider_get_metadata_one(LassoProvider *provider, const char *name);
 LASSO_EXPORT GList* lasso_provider_get_metadata_list(LassoProvider *provider, const char *name);
+LASSO_EXPORT int lasso_provider_verify_saml_signature(LassoProvider *provider,
+		xmlNode *signed_node,
+		xmlDoc *doc);
 
 LASSO_EXPORT LassoProvider* lasso_provider_new_from_dump(const gchar *dump);
 
